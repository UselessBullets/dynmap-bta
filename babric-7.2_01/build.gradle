plugins {
    id 'babric-loom' version '1.4.+'
    id 'java'
}

group = project.mod_group
archivesBaseName = "Dynmap"
version = project.mod_version

loom {
    gluedMinecraftJar()
    noIntermediateMappings()
    customMinecraftManifest.set("https://github.com/Turnip-Labs/bta-manifest-repo/releases/download/v${project.bta_version}/${project.bta_version}.json")
}

configurations {
    shadow
    implementation.extendsFrom(shadow)
}

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = "https://jitpack.io" }
    maven {
        name = 'Babric'
        url = 'https://maven.glass-launcher.net/babric'
    }
    maven {
        name = 'Fabric'
        url = 'https://maven.fabricmc.net/'
    }
    ivy {
        url = "https://github.com/Better-than-Adventure"
        patternLayout {
            artifact "[organisation]/releases/download/v[revision]/[module].jar"
            m2compatible = true
        }
        metadataSources { artifact() }
    }
    ivy {
        url = "https://github.com/Turnip-Labs"
        patternLayout {
            artifact "[organisation]/releases/download/v[revision]/[module]-[revision].jar"
            m2compatible = true
        }
        metadataSources { artifact() }
    }
    ivy {
        url = "https://github.com/Turnip-Labs"
        patternLayout {
            artifact "[organisation]/releases/download/[revision]/[module]-[revision].jar"
            m2compatible = true
        }
        metadataSources { artifact() }
    }
    ivy {
        url = "https://github.com/Turnip-Labs"
        patternLayout {
            artifact "[organisation]/releases/download/[revision]/[module]-bta-[revision].jar"
            m2compatible = true
        }
        metadataSources { artifact() }
    }
    ivy {
        url = "https://piston-data.mojang.com"
        patternLayout {
            artifact "v1/[organisation]/[revision]/[module].jar"
            m2compatible = true
        }
        metadataSources { artifact() }
    }
    ivy {
        url = "https://github.com/MartinSVK12"
        patternLayout {
            artifact "[organisation]/releases/download/[revision]/[module]-[revision].jar"
            m2compatible = true
        }
        metadataSources { artifact() }
    }
}

dependencies {
    minecraft "bta-download-repo:bta:${project.bta_version}"
    mappings loom.layered() {}

    modRuntimeOnly "objects:client:43db9b498cb67058d2e12d394e6507722e71bb45" // https://piston-data.mojang.com/v1/objects/43db9b498cb67058d2e12d394e6507722e71bb45/client.jar
    modImplementation "fabric-loader:fabric-loader:${project.loader_version}"

    compileOnly group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

    shadow project(path: ':DynmapCore', configuration: 'shadow')

    implementation "org.slf4j:slf4j-api:1.8.0-beta4"
    implementation "org.apache.logging.log4j:log4j-slf4j18-impl:2.16.0"

    implementation 'com.google.guava:guava:33.0.0-jre'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    var log4jVersion = "2.20.0"
    implementation("org.apache.logging.log4j:log4j-core:${log4jVersion}")
    implementation("org.apache.logging.log4j:log4j-api:${log4jVersion}")
    implementation("org.apache.logging.log4j:log4j-1.2-api:${log4jVersion}")

    include(implementation("org.apache.commons:commons-lang3:3.12.0"))
}

loom {
    accessWidenerPath = file("src/main/resources/dynmap.accesswidener")
}

processResources {
    filesMatching('fabric.mod.json') {
        expand "version": project.version
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.release.set 8
}

jar {
    from "LICENSE"
    from {
        configurations.shadow.collect { it.toString().contains("guava") ? null : it.isDirectory() ? it : zipTree(it) }
    }
}

remapJar {
    archiveFileName = "${archivesBaseName}-${project.version}-fabric-${project.bta_version}.jar"
    destinationDirectory = file '../target'
}

remapJar.doLast {
    task ->
        ant.checksum file: task.archivePath
}

processResources {
    inputs.property "version", version

    filesMatching("fabric.mod.json") {
        expand "version": version
    }
}
